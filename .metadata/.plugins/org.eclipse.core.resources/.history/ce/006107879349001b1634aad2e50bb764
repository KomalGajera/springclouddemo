package com.example.studentservice.config;

import java.io.IOException;
import java.util.Base64;

import org.modelmapper.Converter;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.modelmapper.spi.MappingContext;
import org.springframework.cloud.client.loadbalancer.LoadBalanced;
import org.springframework.cloud.netflix.zuul.EnableZuulProxy;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@Configuration
@EnableSwagger2
@EnableZuulProxy
public class ApllicationConfig {
	
	@Bean
	public ModelMapper modelMapper() {
		ModelMapper mapper = new ModelMapper();
		mapper.getConfiguration().setFieldMatchingEnabled(true).setMatchingStrategy(MatchingStrategies.STRICT)
				.setFieldAccessLevel(org.modelmapper.config.Configuration.AccessLevel.PRIVATE);

		Converter<byte[], String> base64Converter = new Converter<byte[], String>() {
			@Override
			public String convert(MappingContext<byte[], String> context) {
				return context.getSource() == null ? null : Base64.getEncoder().encodeToString(context.getSource());
			}
		};

		Converter<MultipartFile, byte[]> bytesConverter = new Converter<MultipartFile, byte[]>() {
			@Override
			public byte[] convert(MappingContext<MultipartFile, byte[]> context) {
				try {
					return context.getSource() == null || context.getSource().isEmpty() ? null
							: context.getSource().getBytes();
				} catch (IOException e) {
					e.printStackTrace();
				}
				return null;
			}
		};

		mapper.addConverter(bytesConverter);
		mapper.addConverter(base64Converter);

		return mapper;
	}
	
	@Bean
	@LoadBalanced
	public RestTemplate restTemplate() {
		return new RestTemplate();
	}
	
	@Bean
	public Docket api() {
		return new Docket(DocumentationType.SWAGGER_2).select().apis(RequestHandlerSelectors.any())
				.paths(PathSelectors.any()).build();
	}

}
